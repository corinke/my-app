{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\corin\\\\Desktop\\\\my-app\\\\src\\\\components\\\\checkbox.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\nimport cocktails from './data.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Checkbox(props) {\n  _s();\n  const [checked, setChecked] = useState(false);\n  const checkedText = props.onText;\n  const uncheckedText = props.offText;\n  const togglePreference = props.togglePreference;\n  const cocktails = props.cocktails;\n  const handleChange = () => {\n    setChecked(!checked);\n    togglePreference(cocktails);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: checked ? checkedText : uncheckedText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 7\n  }, this);\n}\n_s(Checkbox, \"OiiR1BYWvMsLHMiD2uYkeM3TCO0=\");\n_c = Checkbox;\n;\nexport { Checkbox };\nvar _c;\n$RefreshReg$(_c, \"Checkbox\");","map":{"version":3,"names":["React","useState","PropTypes","cocktails","jsxDEV","_jsxDEV","Checkbox","props","_s","checked","setChecked","checkedText","onText","uncheckedText","offText","togglePreference","handleChange","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/corin/Desktop/my-app/src/components/checkbox.jsx"],"sourcesContent":["\r\nimport React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport cocktails from './data.js'\r\n\r\nfunction Checkbox(props) { \r\n  \r\n    const [checked, setChecked] = useState(false); \r\n    const checkedText = props.onText; \r\n    const uncheckedText = props.offText; \r\n    const togglePreference = props.togglePreference; \r\n    const cocktails = props.cocktails; \r\n    \r\n    const handleChange = () => { \r\n      \r\n      setChecked(!checked); togglePreference(cocktails); \r\n      \r\n    }; \r\n    \r\n    return ( \r\n      \r\n      <div>\r\n      \r\n        \r\n        \r\n        <p>\r\n          {checked ? checkedText : uncheckedText}\r\n        </p> \r\n        \r\n      </div>\r\n        \r\n    ); \r\n  \r\n  }; \r\n  \r\n  \r\n  export {Checkbox};"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,SAAS,MAAM,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAErB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMU,WAAW,GAAGJ,KAAK,CAACK,MAAM;EAChC,MAAMC,aAAa,GAAGN,KAAK,CAACO,OAAO;EACnC,MAAMC,gBAAgB,GAAGR,KAAK,CAACQ,gBAAgB;EAC/C,MAAMZ,SAAS,GAAGI,KAAK,CAACJ,SAAS;EAEjC,MAAMa,YAAY,GAAGA,CAAA,KAAM;IAEzBN,UAAU,CAAC,CAACD,OAAO,CAAC;IAAEM,gBAAgB,CAACZ,SAAS,CAAC;EAEnD,CAAC;EAED,oBAEEE,OAAA;IAAAY,QAAA,eAIEZ,OAAA;MAAAY,QAAA,EACGR,OAAO,GAAGE,WAAW,GAAGE;IAAa;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACpC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEA;AAIV;AAACb,EAAA,CA5BMF,QAAQ;AAAAgB,EAAA,GAARhB,QAAQ;AA4Bd;AAGD,SAAQA,QAAQ;AAAE,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}